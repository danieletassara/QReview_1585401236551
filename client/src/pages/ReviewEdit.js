/* 
* Generated by
* 
*      _____ _          __  __      _     _
*     / ____| |        / _|/ _|    | |   | |
*    | (___ | | ____ _| |_| |_ ___ | | __| | ___ _ __
*     \___ \| |/ / _` |  _|  _/ _ \| |/ _` |/ _ \ '__|
*     ____) |   < (_| | | | || (_) | | (_| |  __/ |
*    |_____/|_|\_\__,_|_| |_| \___/|_|\__,_|\___|_|
*
* The code generator that works in many programming languages
*
*			https://www.skaffolder.com
*
*
* You can generate the code from the command-line
*       https://npmjs.com/package/skaffolder-cli
*
*       npm install -g skaffodler-cli
*
*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *
*
* To remove this comment please upgrade your plan here: 
*      https://app.skaffolder.com/#!/upgrade
*
* Or get up to 70% discount sharing your unique link:
*       https://app.skaffolder.com/#!/register?friend=5e7f4c1806e8563f3229b900
*
* You will get 10% discount for each one of your friends
* 
*/
// Dependencies
import React, { Component } from "react";
import { Link } from "react-router-dom";
import Utils from "../utils/utils";

// Redux
import PropTypes from "prop-types";
import { bindActionCreators } from "redux";
import { connect } from "react-redux";

// Material UI
import TextField from "@material-ui/core/TextField";
import Button from "@material-ui/core/Button";
import Select from "@material-ui/core/Select";
import MenuItem from "@material-ui/core/MenuItem";
import InputLabel from "@material-ui/core/InputLabel";
import FormControl from "@material-ui/core/FormControl";

// Custom Actions


// START IMPORT ACTIONS
import ReviewActions from "../redux/actions/ReviewActions";
import RestaurantActions from "../redux/actions/RestaurantActions";

// END IMPORT ACTIONS

/** APIs

* actionsReview.get
*	@description CRUD ACTION get
*	@param ObjectId id - Id resource
*
* actionsReview.update
*	@description CRUD ACTION update
*	@param ObjectId id - Id
*
* actionsRestaurant.findByReview
*	@description CRUD ACTION findByReview
*	@param Objectid key - Id of model to search for
*
* actionsReview.create
*	@description CRUD ACTION create
*

**/

class ReviewEdit extends Component {
  // Init review
  constructor(props) {
    super(props);
    this.state = {
      review: {}
    };
  }

  // Load data on start
  componentDidMount() {
    if (this.props.match.params.id !== "new") {
      this.props.actionsReview.loadReview(this.props.match.params.id);
      this.props.actionsRestaurant.findByReview(this.props.match.params.id);
    }
    
  }

  // Insert props review in state
  componentWillReceiveProps(props) {
    this.setState(...this.state, {
      review: props.review
    });
  }

  // Save data
  save(event) {
    event.preventDefault();
    if (this.state.review._id) {
      this.props.actionsReview.saveReview(this.state.review).then(data => {
        this.props.history.push("/");
      });
    } else {
      this.props.actionsReview.createReview(this.state.review).then(data => {
        this.props.history.push("/");
      });
    }
  }

  // Show content
  render() {
    return (
      <div>
        <h1>Review Edit</h1>
        <form className="myForm" onSubmit={this.save.bind(this)}>

          
          <TextField
            id="Description"
            label="Description"
            value={this.state.review.Description || ""}
            onChange={Utils.handleChange.bind(this, "review")}
            margin="normal"
            fullWidth
            required
            {...(!this.state.review.Description && this.state.review.Description === ""
              ? { error: true }
              : {})}
          />
          
          <FormControl fullWidth required
              {...(!this.state.review.Global && !this.state.review.Global
                ? { error: true }
                : {})}>
            <InputLabel shrink htmlFor="Global">
              Global
            </InputLabel>
            <Select
              value={this.state.review.Global || ""}
              onChange={Utils.handleChangeSelect.bind(this, "review")}
              inputProps={{
                id: "Global",
                name: "Global"
              }}
              fullWidth
            >
              <MenuItem value="">
                <em>None</em>
              </MenuItem>
              <MenuItem value={"1"}>1</MenuItem>
              <MenuItem value={"2"}>2</MenuItem>
              <MenuItem value={"3"}>3</MenuItem>
              <MenuItem value={"4"}>4</MenuItem>
              <MenuItem value={"5"}>5</MenuItem>
            </Select>
          </FormControl>
          
          <TextField
            id="Title"
            label="Title"
            value={this.state.review.Title || ""}
            onChange={Utils.handleChange.bind(this, "review")}
            margin="normal"
            fullWidth
            required
            {...(!this.state.review.Title && this.state.review.Title === ""
              ? { error: true }
              : {})}
          />
          
          
          <TextField
            id="URID"
            label="URID"
            value={this.state.review.URID || ""}
            onChange={Utils.handleChange.bind(this, "review")}
            margin="normal"
            fullWidth
            required
            {...(!this.state.review.URID && this.state.review.URID === ""
              ? { error: true }
              : {})}
          />
          
          {/* RELATIONS */}

          {/* EXTERNAL RELATIONS */}
          
          {/* External relation with Restaurant */}
          
          <h3>Restaurant</h3>
          {(!this.props.listRestaurant || this.props.listRestaurant.length === 0) && 
            <div>No Restaurant associated</div>
          }
          {this.props.listRestaurant &&
            this.props.listRestaurant.map((item, i) => {
              return (
                <Link to={"/restaurants/" + item._id} key={item._id}>
                  {item._id}
                </Link>
              );
            })}

          
          {/* Footer */}
          <div className="footer-card">
            <Link to="/">Back to list</Link>

            <Button type="submit" variant="contained" color="primary">
              Save
            </Button>
          </div>
        </form>
      </div>
    );
  }
}

// Store actions
const mapDispatchToProps = function(dispatch) {
  return { 
    actionsReview: bindActionCreators(ReviewActions, dispatch),
    actionsRestaurant: bindActionCreators(RestaurantActions, dispatch),
  };
};

// Validate types
ReviewEdit.propTypes = { 
  actionsReview: PropTypes.object.isRequired,
  actionsRestaurant: PropTypes.object.isRequired,
};

// Get props from state
function mapStateToProps(state, ownProps) {
  return {
    review: state.ReviewEditReducer.review,
    listRestaurant: state.ReviewEditReducer.listRestaurant
  };
}

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(ReviewEdit);
